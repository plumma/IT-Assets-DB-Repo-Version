@model ITAssetsDatabase.Web.ViewModels.Assets.ReDeployViewModel

@{
    ViewBag.Title = "ReDeploy";
}

<style>
    #wrapper {
        background-color: white;
        box-shadow: 5px 5px 5px #888888;
        padding: 40px;
        width: 75% /*;border:medium solid*/;
        /*height: 1300px;*/
    }

    input {
        width: 400px;
        padding-left: 25px;
        padding: 6px 10px 7px 30px;
        font-size: 14px;
        background-color: #FFF7F7;
    }


    .enabled input:focus, select:focus {
            -webkit-box-shadow: 0px 0px 0px 1px rgba(242,17,17,1);
            -moz-box-shadow: 0px 0px 0px 1px rgba(242,17,17,1);
            box-shadow: 0px 0px 0px 1px rgba(242,17,17,1);
            background-color: #f3eeee;
        }


    select {
        height: 33px;
        width: 440px;
        background-color: #FFF7F7;
        padding-left: 27px;
        
    }



    #textBody {
        margin: 20px; /*border:medium solid;*/
    }


    .Lookup {
        background: transparent url('../Images/icon_search_trans.png') 8px 8px no-repeat;
        background-color: #FFF7F7;
    }

    .Helpdesk {
        background: transparent url('../Images/F.png') 8px 8px no-repeat;
    }

    #ResolutionText {
        margin-top: 10px;
        margin-bottom: 30px;
        width: 670px;
        word-wrap: break-word;
    }



    #CloseBtn {
        clear: both;
        padding-top: 80px;
        margin-left: 310px;        
        position: relative;
    }

    .editor-label {
        clear: both;
        margin-top: 10px;
        float: left;        
    }

    
    .myheader {
        
        /*border:medium solid;*/
        clear: both;
        float:left;
        margin-top: 40px;
        margin-bottom: 30px;
        
        font-weight:bold;
        color:black;
        font-size: 1.1em;
        
    }


    .editor-field {
        float: right;
        vertical-align: central;
    }


     .mylabel {

        clear: both;        
        float: left;        
        margin-bottom:7px;        
    }

    
    .editor-field.readonly {
        color:darkred;
        font-weight:bold;
        /*border:medium solid;*/
        width:437px;
        height:23px;
        margin-bottom:7px;        
        }


    h4 {
        margin-bottom: 40px;
    }

    p {
        clear: both;
    }


    textarea {
        width: 642px;
        height: 147px;
    }


    #please-wait {
        display: none;
        position: fixed;
        left: 0px;
        top: 0px;
        width: 100%;
        height: 100%;
        text-align: center;
        z-index: 1000;
    }

        #please-wait .modal {
            z-index: 1999;
            left: 0;
            top: 0;
            width: 100%;
            height: 100%;
            opacity: 0.5;
            -moz-opacity: 0.5;
            background-color: black;
            margin-left: 0;
        }

        #please-wait .spinner {
            z-index: 2000;
            padding-top: 20px;
            padding-left: 20px;
            background: #ffffff url("../../Images/fetch.gif") no-repeat 15px center;
            width: 400px;
            height: 40px;
            border: 2px solid #666;
            font-weight: bold;
            text-align: center;
            position: relative;
            margin-left: auto;
            margin-right: auto;
            top: 35%;
            display: block;
            border-radius: 5px;
        }

    input[type="checkbox"], input[type="checkbox"]:focus {

        box-shadow:none;
        width: 20px;
        height: 20px;      
        position:absolute;
        top:-2px;
        left:0px;
        padding:0px;

    }

    label {

        margin-left:30px;
        display: inline-block;
        font-weight:bold;
        color:black;
        font-size: 1.1em;        
    }
  

    #checkboxwrapper1.disabled {

        color:#d5cece; 
    }

     #checkboxwrapper1.disabled input {
        
        box-shadow:inset rgba(0,0,0,0.25) 0 1px 1px;
        color:#d5cece;
        pointer-events:none;
        
    }

        #checkboxwrapper1.disabled select {
            box-shadow:inset rgba(0,0,0,0.25) 0 1px 1px;
            color:#d5cece;
            pointer-events:none;
        }

     #checkboxwrapper1.disabled a {        
        
        color:#d5cece;
        pointer-events:none;
        cursor: default;        
    }



     #checkboxwrapper2.disabled {

        color:#d5cece; 
    }

     #checkboxwrapper2.disabled input {
        
        box-shadow:inset rgba(0,0,0,0.25) 0 1px 1px;
        color:#d5cece;
        pointer-events:none;
        
    }

        #checkboxwrapper2.disabled select {
            box-shadow:inset rgba(0,0,0,0.25) 0 1px 1px;
            color:#d5cece;
            pointer-events:none;
        }

     #checkboxwrapper2.disabled a {        
        
        color:#d5cece;
        pointer-events:none;
        cursor: default;        
    }






</style>



@using (Html.BeginForm()) {
    @Html.AntiForgeryToken()
    @Html.ValidationSummary(true)

    <fieldset>
        <legend>ReDeployViewModel</legend>

        <div id="wrapper">

            <div id="textBody">

                <h2 style="text-align:center">Redeploy Asset</h2>

                @Html.HiddenFor(model => model.id)

                <h4>Current Assignment</h4>  
                
                
                <div class="mylabel">
                    Status
                </div>
                <div class="editor-field readonly">
                    @Html.DisplayFor(model => model.AssetStatus)                    
                </div>

                <div class="mylabel">
                    Device Type
                </div>
                <div class="editor-field readonly">
                    @Html.DisplayFor(model => model.DeviceDetails)
                </div>

                <div class="mylabel">
                    Domain
                </div>
                <div class="editor-field readonly">
                    @Html.DisplayFor(model => model.ComputerDomain)
                </div>

                <div class="mylabel">
                    Hostname
                </div>
                <div class="editor-field readonly">
                    @Html.DisplayFor(model => model.Hostname)
                </div>

                <div class="mylabel">
                    Assigned to
                </div>
                <div class="editor-field readonly">
                    @Html.DisplayFor(model => model.AssignedTo)
                </div>



                 @*Redeploy*@

                

                    <div class="myheader" id="header1" style="position:relative">

                        @Html.LabelFor(model => model.RedeployCheckBox, "Re-Deploy Asset")
                        @Html.CheckBoxFor(model => model.RedeployCheckBox)

                    </div>
               

                    @*   WRAPPER  1*@

                <div id="checkboxwrapper1" class="enabled">

                    <div class="editor-label">
                        Helpdesk Ticket Reference
                    </div>
                    <div style="position:relative" class="editor-field">
                        <div style="display:inline;position:absolute;top:13px;right:20px">@Html.ValidationMessageFor(model => model.HelpdeskRef)</div>
                        @Html.EditorFor(model => model.HelpdeskRef, new { @class = "Helpdesk" })
                    </div>


                    <div class="editor-label">
                        Domain
                    </div>
                    <div style="padding-bottom:6px;" class="editor-field">
                        @Html.DropDownListFor(model => model.DomainId, Model.Domain)
                    </div>



                    <div class="editor-label">
                        Lookup Requester
                    </div>
                    <div style="position:relative" class="editor-field">
                        <div style="display:inline;position:absolute;top:13px;right:20px">@Html.ValidationMessageFor(m => m.LookupRequester)</div>
                        @Html.TextBox("Requester")
                        @Html.HiddenFor(model => model.RequesterSID)
                        @Html.HiddenFor(model => model.RequesterFirstName)
                        @Html.HiddenFor(model => model.RequesterMiddleName)
                        @Html.HiddenFor(model => model.RequesterSurname)
                        @Html.HiddenFor(model => model.RequesterEmail)
                        @Html.HiddenFor(model => model.RequesterDomain)
                        @Html.HiddenFor(model => model.RequesterDomainLogon)
                    </div>


                    <div class="editor-label">
                        Look up End User
                    </div>
                    <div style="position:relative" class="editor-field">
                        <div style="display:inline;position:absolute;top:13px;right:20px">@Html.ValidationMessageFor(m => m.LookupEndUser)</div>
                        @Html.TextBox("EndUser")
                        @Html.HiddenFor(model => model.AssigneeSID)
                        @Html.HiddenFor(model => model.AssigneeFirstName)
                        @Html.HiddenFor(model => model.AssigneeMiddleName)
                        @Html.HiddenFor(model => model.AssigneeSurname)
                        @Html.HiddenFor(model => model.AssigneeEmail)
                        @Html.HiddenFor(model => model.AssigneeDomain)
                        @Html.HiddenFor(model => model.AssigneeDomainLogon)
                    </div>

                </div>             
                
                @* Change Hostname *@
                
                
                @*   WRAPPER  2     *@

                            
                <div class="editor-label myheader" id="header2" style="position:relative">
                    @Html.LabelFor(model => model.ChangeBuildHostnameCheckBox, "Change Build/Hostname", new { style = "color: lightgray" })
                    @Html.CheckBoxFor(model => model.ChangeBuildHostnameCheckBox)
                </div>

                
                
                <div id="checkboxwrapper2" class="disabled">

                    <div id="fetcherror" style="padding-top:60px;color:red;float:right;padding-right:70px;display:none">Please correct Highlighted fields before Fetch</div>

                 
                     <div class="editor-label">
                        Location
                    </div>
                    <div style="position:relative" class="editor-field">
                        <div style="display:inline;position:absolute;top:13px;right:20px">@Html.ValidationMessageFor(m => m.LookupLocation)</div>
                        @Html.TextBox("Location")
                        @Html.HiddenFor(model => model.LocationId)
                    </div>


                    @Html.HiddenFor(model => model.DeviceId)

                    <div class="editor-label">
                        Lookup Build
                    </div>
                    <div style="position:relative" class="editor-field">
                        @Html.TextBox("LookupBuild")
                        @Html.HiddenFor(model => model.BuildId)                        
                        @Html.HiddenFor(model => model.BuildDomain)                        
                    </div>

                    <div class="editor-label">
                        Add Hostname
                    </div>

                    <div style="position:relative" class="editor-field">
                        <a href="#" style="text-align:right" id="fetch">Fetch</a>

                        <div style="display:inline;position:absolute;top:13px;right:20px">@Html.ValidationMessageFor(m => m.Hostname)</div>                        
                        @Html.TextBoxFor(m => m.Hostname, new { @readonly = true })
                        
                        @Html.HiddenFor(model => model.HostnameId)
                    </div>

                </div>

                    <div style="clear:both;padding-top:20px;padding-bottom:10px">
                        Notes
                    </div>
                    <div>
                        @Html.TextAreaFor(model => model.Notes)
                        @Html.ValidationMessageFor(model => model.Notes)
                    </div>

                
                @Html.HiddenFor(model => model.StaffId)

                <p style="text-align:center">
                    <input style="clear:both" type="submit" value="Update" id="Update" />                    
                </p>

            </div>
        </div>
    </fieldset>
}


<div>
    @Html.ActionLink("Cancel", "Index")
</div>


<div id="please-wait">
    <div class="modal">
        <div class="spinner">Doing Ping and AD check Pls Wait </div>
    </div>
</div>



@section Scripts {
    @Scripts.Render("~/bundles/jqueryval")
    @Scripts.Render("~/bundles/jqueryui")
    @Styles.Render("~/Content/themes/base/css")   @* Allows Background to go grey in Modal*@
    <link href="~/Content/themes/base/jquery.ui.autocomplete.css" rel="stylesheet" />
    <script src="~/Scripts/Autosize/jquery.autosize.min.js"></script>
    <script src="~/Scripts/Autosize/jquery.autosize.js"></script>
    <script src="~/Scripts/plupload-2.1.2/js/plupload.full.min.js"></script>

<script>


    //$('#changehostnamebuild input').attr('readonly', 'readonly');


    $('#RedeployCheckBox').change(function () {

        if ($(this).is(':checked')) {

            $('#checkboxwrapper1.disabled').attr("class", "enabled");
            $('#DomainId').attr("disabled", false);
            $('#header1 label').css("color", "black");

        } else {

            $('#checkboxwrapper1.enabled').attr("class", "disabled");
            $('#DomainId').attr("disabled", true);
            $('#header1 label').css("color", "lightgray");
            
        }
            
        });



        $('#ChangeBuildHostnameCheckBox').change(function () {

            if ($(this).is(':checked')) {

                $('#checkboxwrapper2.disabled').attr("class", "enabled");
                $('#header2 label').css("color", "black");


            } else {

                $('#checkboxwrapper2.enabled').attr("class", "disabled");
                $('#header2 label').css("color", "lightgray");
            
            }

        });


        $('#Requester').autocomplete({

            source: function (request, response) {
                var filter = $("#DomainId").val();
                $.getJSON("/Assets/LookupPersonAutocomplete", { term: request.term, DomainId: filter }, response);
            },

            select: function (event, ui) {
                event.preventDefault();  // Stops the deafult action of displaying the Value rather than the label in the box after selection
                $("#Requester").val(ui.item.label);  // Displays Label in box after selection
                $("#RequesterSID").val(ui.item.value);

                $("#RequesterFirstName").val(ui.item.FirstName);
                $("#RequesterMiddleName").val(ui.item.MiddleName);
                $("#RequesterSurname").val(ui.item.Surname);
                $("#RequesterEmail").val(ui.item.Email);
                $("#RequesterDomain").val(ui.item.Domain);
                $("#RequesterDomainLogon").val(ui.item.Logon);
            },
            focus: function (event, ui) {
                event.preventDefault();
                //$("#customer-search").val(ui.item.label);
            }

        });



        $('#EndUser').autocomplete({
            source: function (request, response) {
                var filter = $("#DomainId").val();
                $.getJSON("/Assets/LookupPersonAutocomplete", { term: request.term, DomainId: filter }, response);
            },

            select: function (event, ui) {
                event.preventDefault();  // Stops the deafult action of displaying the Value rather than the label in the box after selection
                $("#EndUser").val(ui.item.label);  // Displays Label in box after selection
                $("#AssigneeSID").val(ui.item.value);

                $("#AssigneeFirstName").val(ui.item.FirstName);
                $("#AssigneeMiddleName").val(ui.item.MiddleName);
                $("#AssigneeSurname").val(ui.item.Surname);
                $("#AssigneeEmail").val(ui.item.Email);
                $("#AssigneeDomain").val(ui.item.Domain);
                $("#AssigneeDomainLogon").val(ui.item.Logon);

            },
            focus: function (event, ui) {
                event.preventDefault();
                //$("#customer-search").val(ui.item.label);
            }

        });


        //  LookupLocation

        $('#Location').autocomplete({
            source: '/Assets/LookupLocationAutocomplete',
            //delay: 500,
            //minLength: 2,

            select: function (event, ui) {
                event.preventDefault();  // Stops the deafult action of displaying the Value rather than the label in the box after selection
                $("#Location").val(ui.item.label);  // Displays Label in box after selection
                $("#LocationId").val(ui.item.value);
            },
            focus: function (event, ui) {
                event.preventDefault();
                //$("#customer-search").val(ui.item.label);
            }

        });

    
        //  Lookup Build


        $('#LookupBuild').autocomplete({

            source: function (request, response) {
                var filter = $("#DeviceId").val();
                $.getJSON("/Assets/LookupBuildAutocomplete", { term: request.term, filter: filter }, response);
            },
            
            select: function (event, ui) {
                event.preventDefault();  // Stops the deafult action of displaying the Value rather than the label in the box after selection
                $("#LookupBuild").val(ui.item.label);  // Displays Label in box after selection
                $("#BuildId").val(ui.item.value);

                //alert("buildid", $("#BuildId").val(ui.item.value));
                $("#BuildDomain").val(ui.item.build_domain);
            },
            focus: function (event, ui) {
                event.preventDefault();
            }

        });

    //Start of Fetch  //

        $('#fetch').click(function () {


            //alert("Location: " + $('#Location').val());
            //alert("LookupBuild: " + $('#LookupBuild').val());
            //alert("LocationId: " + $('#LocationId').val());
            //alert("#DeviceId: " + $('#DeviceId').val());
            //alert("#BuildId: " + $('#BuildId').val());

          
            

            // Check Location, Device, Build fields are filled in
            var isValid = true;

            //$('#Location,#LookupBuild,#LocationId,#DeviceId,#BuildId').each(function () {

            $('#Location,#LookupBuild,#LocationId,#DeviceId,#BuildId').each(function () {

                if ($.trim($(this).val()) == "" || $(this).val() == 0) {

                    $(this).css({
                        "border": "1px solid red",
                        "background": "#FFCECE"
                    });

                    $("#fetcherror").css("display", "block");
                    isValid = false;
                    

                    //alert("Location: " + $('#Location').val());
                    //alert("LookupBuild: " + $('#LookupBuild').val());
                    //alert("LocationId: " + $('#LocationId').val());
                    //alert("#DeviceId: " + $('#DeviceId').val());
                    //alert("#BuildId: " + $('#BuildId').val());

               

                }

                else {
                    $(this).css({
                        "border": "",
                        "background": ""
                    });

                }

                if (isValid == true) $("#fetcherror").css("display", "none");

            });




            if (isValid == true) {
                $('#please-wait').css('display', 'block');

                var LocationId = $('#LocationId').val();                
                var StaffId = $('#StaffId').val();
                var BuildId = $('#BuildId').val();
                var DeviceId = $('#DeviceId').val();

                //alert("LocationId: " + LocationId);
                //alert("DeviceId: " + DeviceId);
                //alert("StaffId: " + StaffId);
                //alert("BuildId: " + BuildId);


                $.ajax({
                    url: "/Assets/FetchHostname",
                    data: { LocationId: LocationId, DeviceId: DeviceId, StaffId: StaffId, BuildId: BuildId },
                    type: "GET"
                }).done(function (mydata) {

                    $('#please-wait').css('display', 'none');
                    $('#HostnameId').val(mydata.Id);
                    $('#Hostname').val(mydata.FullHostname);
                    $('#Hostname').focus();

                });
            }


        });

        // Update Asset

        $('#Update').click(function (e) {


            if ($('#RedeployCheckBox').is(':not(:checked)') && $('#ChangeBuildHostnameCheckBox').is(':not(:checked)'))
                
            {
                alert("Please ensure you have selected at least one checkbox");
                e.preventDefault();

            } 

            else
            {
                $("#thisForm").submit();;
                
            }
            
       
        });


    </script>
    
}



